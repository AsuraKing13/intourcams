-- Create base enums
DO $$ BEGIN
    CREATE TYPE public.user_role AS ENUM ('Admin', 'Editor', 'User', 'Tourism Player');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE public.grant_application_status AS ENUM ('Pending', 'Approved', 'Rejected', 'Conditional Offer', 'Early Report Required', 'Early Report Submitted', 'Final Report Required', 'Final Report Submitted', 'Complete');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE public.notification_type AS ENUM ('new_app', 'resubmission', 'submission_confirm', 'status_change', 'auto_rejection');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE public.user_tier AS ENUM ('Normal', 'Premium');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE public.feedback_status AS ENUM ('new', 'seen', 'archived');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE public.itinerary_item_type AS ENUM ('cluster', 'event');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Create users table
CREATE TABLE IF NOT EXISTS public.users (
    id UUID PRIMARY KEY,
    name TEXT,
    email TEXT,
    role public.user_role DEFAULT 'User',
    avatar TEXT,
    created_at TIMESTAMPTZ DEFAULT now(),
    tier public.user_tier DEFAULT 'Normal'
);

-- Create clusters table
CREATE TABLE IF NOT EXISTS public.clusters (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT now(),
    name TEXT NOT NULL,
    location TEXT,
    description TEXT,
    category TEXT[],
    timing TEXT,
    image TEXT,
    is_preferred BOOLEAN DEFAULT false,
    owner_id UUID REFERENCES public.users(id),
    latitude FLOAT8,
    longitude FLOAT8,
    average_rating FLOAT4 DEFAULT 0,
    review_count INTEGER DEFAULT 0,
    display_address TEXT,
    view_count INTEGER DEFAULT 0,
    click_count INTEGER DEFAULT 0
);

-- Create cluster_analytics table
CREATE TABLE IF NOT EXISTS public.cluster_analytics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    cluster_id UUID NOT NULL REFERENCES public.clusters(id) ON DELETE CASCADE,
    type TEXT NOT NULL CHECK (type IN ('view', 'click'))
);

-- Create cluster_reviews table
CREATE TABLE IF NOT EXISTS public.cluster_reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT now(),
    cluster_id UUID NOT NULL REFERENCES public.clusters(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES public.users(id),
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    comment TEXT
);

-- Create events table
CREATE TABLE IF NOT EXISTS public.events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT now(),
    title TEXT NOT NULL,
    description TEXT,
    start_date TIMESTAMPTZ,
    end_date TIMESTAMPTZ,
    location_name TEXT,
    latitude FLOAT8,
    longitude FLOAT8,
    category TEXT,
    image_url TEXT,
    organizer TEXT,
    created_by UUID REFERENCES public.users(id),
    updated_at TIMESTAMPTZ DEFAULT now(),
    display_address TEXT,
    marker_color TEXT,
    contact_info TEXT
);

-- Create notifications table
CREATE TABLE IF NOT EXISTS public.notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT now(),
    recipient_id TEXT,
    message TEXT,
    timestamp TIMESTAMPTZ DEFAULT now(),
    read BOOLEAN DEFAULT false,
    related_application_id TEXT,
    type public.notification_type,
    cleared_by UUID[],
    read_by UUID[]
);

-- Create grant_applications table
CREATE TABLE IF NOT EXISTS public.grant_applications (
    id TEXT PRIMARY KEY,
    applicant_id UUID REFERENCES public.users(id),
    organization_name TEXT,
    email TEXT,
    contact_number TEXT,
    grant_category_id TEXT,
    primary_creative_category_id TEXT,
    creative_sub_category_id TEXT,
    project_name TEXT,
    project_description TEXT,
    program_start_date DATE,
    end_date DATE,
    amount_requested NUMERIC,
    submission_timestamp TIMESTAMPTZ DEFAULT now(),
    last_update_timestamp TIMESTAMPTZ DEFAULT now(),
    notes TEXT,
    status_history JSONB DEFAULT '[]'::jsonb,
    resubmitted_from_id TEXT,
    amount_approved NUMERIC,
    initial_disbursement_amount NUMERIC,
    early_report_rejection_count INTEGER DEFAULT 0,
    status public.grant_application_status DEFAULT 'Pending',
    resubmission_count INTEGER DEFAULT 0,
    early_report_files JSONB DEFAULT '[]'::jsonb,
    final_report_files JSONB DEFAULT '[]'::jsonb,
    final_report_rejection_count INTEGER DEFAULT 0,
    final_disbursement_amount NUMERIC
);

-- Create grant_categories table
CREATE TABLE IF NOT EXISTS public.grant_categories (
    id TEXT PRIMARY KEY,
    name TEXT
);

-- Create creative_categories table
CREATE TABLE IF NOT EXISTS public.creative_categories (
    id TEXT PRIMARY KEY,
    name TEXT,
    subcategories JSONB
);

-- Create promotions table
CREATE TABLE IF NOT EXISTS public.promotions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT now(),
    title TEXT,
    description TEXT,
    image_url TEXT,
    cta_text TEXT,
    cta_link TEXT,
    requires_auth BOOLEAN DEFAULT false,
    is_active BOOLEAN DEFAULT true,
    sort_order INTEGER,
    created_by UUID REFERENCES public.users(id)
);

-- Create public_holidays table
CREATE TABLE IF NOT EXISTS public.public_holidays (
    date DATE PRIMARY KEY,
    name TEXT
);

-- Enable RLS on all tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clusters ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cluster_reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.cluster_analytics ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.grant_applications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.grant_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.creative_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.promotions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.public_holidays ENABLE ROW LEVEL SECURITY;

-- Basic RLS policies
CREATE POLICY "Public can view all clusters" ON public.clusters FOR SELECT USING (true);
CREATE POLICY "Public can view all user profiles" ON public.users FOR SELECT USING (true);
CREATE POLICY "Public can read all reviews" ON public.cluster_reviews FOR SELECT USING (true);
CREATE POLICY "Public can view all events" ON public.events FOR SELECT USING (true);
CREATE POLICY "Public can view all holidays" ON public.public_holidays FOR SELECT USING (true);
CREATE POLICY "Public can view active promotions" ON public.promotions FOR SELECT USING (is_active = true);